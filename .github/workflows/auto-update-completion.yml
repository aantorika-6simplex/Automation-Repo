name: Auto-update completion status based on due date

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  update-status:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run automation logic
        env:
          ACTION_TOKEN: ${{ secrets.ACTION_TOKEN }}
          ORG: aantorika-6simplex   # Replace with your GitHub username
          PROJECT_NUMBER: 1
        run: |
          npm install graphql-request dayjs

          cat <<'EOF' > script.js
          import { GraphQLClient, gql } from "graphql-request";
          import dayjs from "dayjs";

          const client = new GraphQLClient("https://api.github.com/graphql", {
            headers: { Authorization: `Bearer ${process.env.ACTION_TOKEN}` },
          });

          const login = process.env.ORG;
          const projectNumber = process.env.PROJECT_NUMBER;

          // ‚úÖ FIXED QUERY (handles unions correctly)
          const query = gql`
            query($login: String!, $number: Int!) {
              user(login: $login) {
                projectV2(number: $number) {
                  id
                  items(first: 100) {
                    nodes {
                      id
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldDateValue {
                            field {
                              ... on ProjectV2FieldCommon { name }
                            }
                            date
                          }
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field {
                              ... on ProjectV2FieldCommon { name }
                            }
                            name
                          }
                          ... on ProjectV2ItemFieldTextValue {
                            field {
                              ... on ProjectV2FieldCommon { name }
                            }
                            text
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          `;

          const mutation = gql`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { text: $value }
                }
              ) {
                projectV2Item { id }
              }
            }
          `;

          // ‚öôÔ∏è Replace these IDs with your actual project and field IDs
          const projectId = "PVT_kwHODWXJGc4BGnXt";  // Project ID
          const completionStatusFieldId = "PVTSSF_lAHODWXJGc4BGnXtzg3nBFw";
          const daysDelayedFieldId = "PVTF_lAHODWXJGc4BGnXtzg3nA9E";
          const daysBeforeFieldId = "PVTF_lAHODWXJGc4BGnXtzg3nFlU";

          (async () => {
            try {
              const data = await client.request(query, {
                login,
                number: parseInt(projectNumber),
              });

              const project = data.user.projectV2;
              const items = project.items.nodes;
              const today = dayjs();

              for (const item of items) {
                let status = "", dueDate = "";
                for (const field of item.fieldValues.nodes) {
                  if (field.field?.name === "Status") status = field.name;
                  if (field.field?.name === "Due Date") dueDate = field.date;
                }

                if (status === "Done" && dueDate) {
                  const due = dayjs(dueDate);
                  let completionStatus = "";
                  let daysDelayed = 0;
                  let daysBefore = 0;

                  if (today.isAfter(due)) {
                    daysDelayed = today.diff(due, "day");
                    completionStatus = "Delayed";
                  } else if (today.isSame(due, "day")) {
                    completionStatus = "On Due Date";
                  } else {
                    daysBefore = due.diff(today, "day");
                    completionStatus = "Before Due Date";
                  }

                  console.log(`üü¢ Updating ${item.id}: ${completionStatus}`);

                  await client.request(mutation, {
                    projectId,
                    itemId: item.id,
                    fieldId: completionStatusFieldId,
                    value: completionStatus,
                  });

                  if (daysDelayed > 0)
                    await client.request(mutation, {
                      projectId,
                      itemId: item.id,
                      fieldId: daysDelayedFieldId,
                      value: String(daysDelayed),
                    });

                  if (daysBefore > 0)
                    await client.request(mutation, {
                      projectId,
                      itemId: item.id,
                      fieldId: daysBeforeFieldId,
                      value: String(daysBefore),
                    });
                }
              }
            } catch (error) {
              console.error("‚ùå GraphQL Error:", error);
              process.exit(1);
            }
          })();
          EOF

          node script.js
