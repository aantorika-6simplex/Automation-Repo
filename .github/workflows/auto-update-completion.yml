name: Auto-update completion status based on due date

on:
  schedule:
    - cron: "0 3 * * *"  # runs daily at 3 AM UTC
  workflow_dispatch:

permissions:
  contents: read

jobs:
  update-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run automation logic
        env:
          ACTION_TOKEN: ${{ secrets.ACTION_TOKEN }}
          ORG: aantorika-6simplex
          PROJECT_NUMBER: 1
        run: |
          npm install graphql-request dayjs

          cat <<'EOF' > script.js
          import { GraphQLClient, gql } from "graphql-request";
          import dayjs from "dayjs";

          // === CONFIGURATION ===
          const client = new GraphQLClient("https://api.github.com/graphql", {
            headers: { Authorization: `Bearer ${process.env.ACTION_TOKEN}` },
          });

          const login = process.env.ORG;
          const projectNumber = parseInt(process.env.PROJECT_NUMBER);

          // === PROJECT FIELD CONSTANTS ===
          const projectId = "PVT_kwHODWXJGc4BGnXt";
          const completionStatusFieldId = "PVTSSF_lAHODWXJGc4BGnXtzg3nBFw"; // Single select field
          const daysDelayedFieldId = "PVTF_lAHODWXJGc4BGnXtzg3nA9E";       // Number field (not Date)
          const daysBeforeFieldId = "PVTF_lAHODWXJGc4BGnXtzg3nFlU";       // Number field (not Date)

          const completionMap = {
            "On Due Date": "a4b55684",
            "Before Due Date": "739f8394",
            "Delayed": "23e776a7"
          };

          // === QUERIES ===
          const GET_ITEMS = gql`
            query($login: String!, $number: Int!) {
              user(login: $login) {
                projectV2(number: $number) {
                  id
                  items(first: 100) {
                    nodes {
                      id
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldDateValue {
                            field { ... on ProjectV2FieldCommon { name } }
                            date
                          }
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field { ... on ProjectV2FieldCommon { name } }
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          `;

          const UPDATE_COMPLETION = gql`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }
              ) {
                projectV2Item { id }
              }
            }
          `;

          const UPDATE_NUMBER = gql`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { number: $value }
                }
              ) {
                projectV2Item { id }
              }
            }
          `;

          // === MAIN LOGIC ===
          (async () => {
            try {
              const data = await client.request(GET_ITEMS, { login, number: projectNumber });
              const project = data.user.projectV2;
              const items = project.items.nodes;
              const today = dayjs();

              console.log(`ðŸ“‹ Found ${items.length} project items`);

              for (const item of items) {
                let status = "";
                let dueDate = "";

                for (const field of item.fieldValues.nodes) {
                  if (field.field?.name === "Status") status = field.name;
                  if (field.field?.name === "Due Date") dueDate = field.date;
                }

                if (!dueDate || status !== "Done") continue;

                const due = dayjs(dueDate);
                let completionStatus = "";
                let daysDelayed = 0;
                let daysBefore = 0;

                if (today.isAfter(due, "day")) {
                  daysDelayed = today.diff(due, "day");
                  completionStatus = "Delayed";
                } else if (today.isSame(due, "day")) {
                  completionStatus = "On Due Date";
                } else {
                  daysBefore = due.diff(today, "day");
                  completionStatus = "Before Due Date";
                }

                console.log(`Updating ${item.id}: ${completionStatus}`);

                // Update "Completion Status"
                await client.request(UPDATE_COMPLETION, {
                  projectId,
                  itemId: item.id,
                  fieldId: completionStatusFieldId,
                  optionId: completionMap[completionStatus],
                });

                // Update "Days Delayed" (number field)
                if (daysDelayed > 0) {
                  await client.request(UPDATE_NUMBER, {
                    projectId,
                    itemId: item.id,
                    fieldId: daysDelayedFieldId,
                    value: daysDelayed,
                  });
                }

                // Update "Days Before" (number field)
                if (daysBefore > 0) {
                  await client.request(UPDATE_NUMBER, {
                    projectId,
                    itemId: item.id,
                    fieldId: daysBeforeFieldId,
                    value: daysBefore,
                  });
                }
              }

              console.log(" All project items updated successfully!");
            } catch (err) {
              console.error(" Error during execution:", err);
              process.exit(1);
            }
          })();
          EOF

          node script.js
